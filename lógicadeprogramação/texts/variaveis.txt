Variavel :
- Atribuir um apelido para um determinado valor, permitindo que este valor seja modificado durante o programa;
- por debaixo dos panos, o sistema operacional solicita que sua maquina reserve um pedaço de memoria RAM para guardar
esse valor;

Vertentes de linguagens para tratar variaveis:
* Estática -> Varivel de um tipo exclusivo de informação. ex: Variavel numerica será sempre numerica. Voce pode alterar
o numero armazenado mas nao o tipo de variavel.
* Dinâmica -> O tipo é inferido implicitamente e este pode ser mudado ao longo do codigo. A memoria so é alocada se a
variavel tiver um valor. Este é o caso do JS.

tipos de variaveis:

*primitivos :
- undefined -> nao ha tipo nem valor;
- boolean -> verdadeiro ou falso;
- string -> textos;
- number -> numeros;
*complexos :
- function -> funcoes;
- object -> objetos;

var # let:
var -> espaço que ela ja existe (escopo). neste caso a variavel escapa do escopo. 
ex: variavel x dentro do escopo e variavel x fora do escopo, vai dar conflito entre as duas. 


let -> garante que a variavel nao escapa do escopo. 

Aqui usamos var, mas vamos padronizar a partir de agora a palavra let para declaração de variáveis e a palavra const
para declaração de constantes. O null representa uma informação vazia. Diferente de undefined, ele mostra que a variável
foi declarada mas com valor vazio.

Em JavaScript, temos um comportamento estranho das variáveis. Elas podem ser declaradas depois de utilizadas, pois elas
são levantadas para o início do escopo. Isso se chama hoisting.

Usando var variáveis não respeitam seu escopo, uma variável declarada em uma função estará disponível depois do escopo
da função.

Esses comportamentos são peculiares e diferentes de muitas linguagens, por isso padronizamos usar let em vez de var, o
que fará com que os escopos sejam respeitados.

O const impede que o valor possa ser alterado após ser iniciado, gerando um erro ao ser tentado.

const pi = 3.1415;
Operadores lógicos

- Condicionais -> estruturas de decisao e é interpretado como booleano (true or false);

operadores de comparação em JS:
> -> maior 2>0 true
>= -> maior ou igual 2>=2 true
< -> menor 2<0 false==-> igual 1 == 'l' true
        === -> igual em valor e tipo 1 === 'l' false
        != -> diferente 1!=2 true
        !== -> diferente em valor e tipo 'S' !== 5 false

operadores logicos em JS:
&& Em 2>0 && 1!==1 false
|| Ou 2>0 || 1!==1 true
! Nao !(1===1) false

Os operadores de comparação retornam um booleano a depender do resultado da comparação. E os operados lógicos
fazem operações sobre valores booleano. O operador && só retorna verdadeiro se as duas condições forem
verdadeira. Enquanto para o operador || basta uma das condições ser para o resultado ser verdadeiro. O operador
! inverte o valor lógico, ou seja, verdadeiro vira falso e vice-versa:

A       B       A&&B    A||B
false   false   false   false
false   true    false   true
true    false   false   true
true    true    true    true



if else -> Estrutura condicional em JS:
let condicao = x > o;

if (condicao) {
    console.log("X é maior que zero.")
}
else  {
    console.log("X é menor ou igual a zero.")
}

A condição deve estar entre parêntesis. Para fim de ilustração o resultado condição foi guardada em uma variável (linha
1), porém é prática escrever diretamente dentro dos parêntesis. Caso a condição seja true o código dentro do if é
executado, senão o do else é executado.

Ainda é possível fazer estruturas que verifiquem mais de uma condição usando o else if:

if(x > 0){
    console.log("X é positivo");
}

else if(x == 0){
    console.log("X é zero");
}

else{
    console.log("X é negativo");
}

Operador Tenário

Para atribuição condicional de valor o JavaScript possui um operador que permite fazer uma if else inline, isto é, em uma única linha. Operador tenário é representado por ?:

let paridade = x % 2 === 0 ? 'par' : 'impar';

switch ->  estrutura condicional que recebe um valor e executa um código quebrando os casos que a variável pode receber.

let hoje = new Date().getDay(); 
let dia;

switch (hoje) {
  case 0:
    dia = "Domingo";
    break;
  case 1:
    dia = "Segunda";
    break;
  case 2:
     dia = "Terça";
    break;
  case 3:
    dia = "Quarta";
    break;
  case 4:
    dia = "Quinta";
    break;
  case 5:
    dia = "Sexta";
    break;
  case 6:
    dia = "Sábado";
}

O comando new Date().getDay() retorna o dia atual como um inteiro, começando em 0 no domingo e indo até 6 para o sábado.
O switch recebe a variável e quebra casos. Caso seja 1, por exemplo, definimos a variável dia como "Segunda". O break
representa o fim do case. Caso seja omitido o computador executará o caso seguinte. Por isso é dispensável no último
caso. Ainda é possível definir um padrão caso nenhum dos casos exista usando o default.

let sinal = 'azul';
switch(sinal){
    case 'verde' : 
        console.log('pode passar');
        break;
    case 'amarelo' :
        console.log('prestes a fechar, cuidado...');
        break;
    case 'vermelho':
        console.log('fechado, não passe');
        break;
    default:
        console.log('esse não é um valor válido');
        break;
}


Truthy e Falsy

Além do true e do false, o JavaScript aceita outras informações que não são booleanos e os interpreta como se fosse true ou false. Esses casos chamamos de truthy e falsy. Por exemplo, o JavaScript interpreta os seguintes valores como falso:

    0
    '' ou ""
    null
    undefined
    NaN

Todos os demais são interpretados como verdadeiro. Alguns exemplos de truthy:

    []
    {}
    function(){}

Uma utilidade dessa característica é verificar se uma variável está definida antes de usá-la. Assim evitando erro.
